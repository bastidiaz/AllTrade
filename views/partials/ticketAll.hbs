<!-- Ticket container -->
<div id="ticket-list">
  {{#each tickets}}
    <div class="ticket-outer-container">
      <div class="ticket-inner-container">
        <div class="ticket-container1">
          <div class="order-container">
            <div class="order-details">
                <a href="/tickets/{{this.orderNum}}"><p id="order-number">Order No. {{this.orderNum}}</p></a>
              <p id="creation-date">Created on: {{this.creationDate}}</p>
              <p id="ticket-handler">Ticket Handled by: {{this.handlerUsername}}</p>
            </div>
          </div>
        </div>
          {{#isEqual this.orderStatus "PENDING"}}
              <form id="ticketForm" class="modal-form" method="post" action="/all-tickets/accept">
                  <div class="ticket-container2">
                      <div class="status-container">
                          <div class="order-status">
                              <!-- HANDLE BUTTON: IF CLICKED, IT WILL ACCEPT TICKET AND ASSIGN TO LOGGED IN ADMIN -->
                              <input name="orderNum" type="hidden" value="{{this.orderNum}}">
                              <button type="submit" id="handle-btn">ACCEPT</button>
                          </div>
                      </div>
                  </div>
              </form>
              <form id="ticketForm" class="modal-form" method="post" action="/all-tickets/reject">
                  <div class="ticket-container2">
                      <div class="status-container">
                          <div class="order-status">
                              <!-- HANDLE BUTTON: IF CLICKED, IT WILL ACCEPT TICKET AND ASSIGN TO LOGGED IN ADMIN -->
                              <input name="orderNum" type="hidden" value="{{this.orderNum}}">
                              <button type="submit" id="handle-btn">REJECT</button>
                          </div>
                      </div>
                  </div>
              </form>
          {{else}}
              <div class="ticket-container2">
                  <div class="status-container">
                      <div class="order-status">
                          <p>{{this.orderStatus}}</p>
                      </div>
                  </div>
              </div>
          {{/isEqual}}
      </div>
    </div>
  {{/each}}
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchBox = document.getElementById("search-box");
        const sortBySelect = document.getElementById("sort-by");
        const orderBySelect = document.getElementById("order-by");
        const ticketList = document.getElementById("ticket-list");

        let tickets = [
            {{#each tickets}}
                {
                    orderNum: "{{this.orderNum}}",
                    creationDate: "{{this.creationDate}}",
                    handlerUsername: "{{this.handlerUsername}}",
                    orderStatus: "{{this.orderStatus}}"
                },
            {{/each}}
        ];

        // Function to render tickets based on the provided array
        function renderTickets(ticketsArray) {
            ticketList.innerHTML = ""; // Clear existing list

            ticketsArray.forEach(ticket => {
                const ticketElement = document.createElement("div");
                ticketElement.classList.add("ticket-outer-container");
                ticketElement.innerHTML = `
                    <div class="ticket-inner-container">
                        <div class="ticket-container1">
                            <div class="order-container">
                                <div class="order-details">
                                    <a href="/tickets/${ticket.orderNum}"><p id="order-number">Order No. ${ticket.orderNum}</p></a>
                                    <p id="creation-date">Created on: ${ticket.creationDate}</p>
                                    <p id="ticket-handler">Ticket Handled by: ${ticket.handlerUsername}</p>
                                </div>
                            </div>
                        </div>
                        <div class="ticket-container2">
                            <div class="status-container">
                                <div class="order-status">
                                    <p>${ticket.orderStatus}</p>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                ticketList.appendChild(ticketElement);
            });
        }

        // Initial rendering of tickets
        renderTickets(tickets);

        // Event listener for search input
        searchBox.addEventListener("input", function () {
            const searchTerm = searchBox.value.trim().toLowerCase();

            if (searchTerm === "") {
                renderTickets(tickets); // If search input is empty, render all tickets
                return;
            }

            const filteredTickets = tickets.filter(ticket =>
                ticket.orderNum.toString().includes(searchTerm) ||
                ticket.creationDate.toLowerCase().includes(searchTerm) ||
                ticket.handlerUsername.toLowerCase().includes(searchTerm) ||
                ticket.orderStatus.toLowerCase().includes(searchTerm)
            );

            renderTickets(filteredTickets); // Render filtered tickets based on search term
        });

        // Event listener for sorting by status or order
        sortBySelect.addEventListener("change", function () {
            const sortBy = sortBySelect.value;

          if (sortBy === "all") {
                    renderTickets(tickets); // Render all tickets
                } else {
                    const sortedTickets = tickets.filter(ticket => ticket.orderStatus.toLowerCase() === sortBy);
                    renderTickets(sortedTickets);
                }
          /*
            if (sortBy === "accepted") {
                const acceptedTickets = tickets.filter(ticket => ticket.orderStatus === "ACCEPTED");
                renderTickets(acceptedTickets);
            } else if (sortBy === "rejected") {
                const rejectedTickets = tickets.filter(ticket => ticket.orderStatus === "REJECTED");
                renderTickets(rejectedTickets);
            } else if (sortBy === "pending") {
                const pendingTickets = tickets.filter(ticket => ticket.orderStatus === "PENDING");
                renderTickets(pendingTickets);
            }
            */
        });

        // Event listener for sorting order (ascending or descending)
        orderBySelect.addEventListener("change", function () {
            const orderBy = orderBySelect.value;

            if (orderBy === "date") {
                tickets.sort((a, b) => new Date(a.creationDate) - new Date(b.creationDate));
            } else if (orderBy === "orderNum") {
                tickets.sort((a, b) => a.orderNum - b.orderNum);
            }

            renderTickets(tickets); // Re-render tickets after sorting
        });
    });
</script>
