<!-- Ticket container -->
<div id="ticket-list">
    <form id="ticket-form" method="post" action="/tickets-handled/update">
        <div id="ticketModal" class="modal">
            <div class="modal-content">
                <div class="modal-manage-header">
                    <div class="edit-ticket-title">
                        <h4> EDIT TICKET DETAILS </h4>
                    </div>

                    <div class="close-ticket-details">
                        <span class="close">&times;</span>
                    </div>
                </div>

                <div class="order-status-modal-container">
                    <input type="hidden" id="modalOrderNum" name="orderNum">
                    <label for="modalOrderStatus" id="order-status-title-modal"> Order Status:</label>

                    <select id="modalOrderStatus" name="orderStatus">
                        <option value="PENDING">PENDING</option>
                        <option value="ACCEPTED">ACCEPTED</option>
                        <option value="REJECTED">REJECTED</option>
                        <option value="CANCELLED">CANCELLED</option>
                        <option value="IN PROGRESS">IN PROGRESS</option>
                        <option value="ON THE WAY">ON THE WAY</option>
                        <option value="COMPLETED">COMPLETED</option>
                    </select>
                </div>

                <div class="handler-modal-container">
                    <div class="modalHandlerUsername-container1">
                        <label for="modalHandlerUsername" id="handler-label-id">Handler:</label>
                    </div>

                    <div class="modalHandlerUsername-container2">
                        <input type="text" id="modalHandlerUsername" name="handlerUsername" placeholder="Handler Username">
                    </div>
                </div>

                <div class="description-modal-container">
                    <div class="modalDescription-container1">
                        <label for="modalDescription" id="description-label-id">Description:</label>
                    </div>
                    
                    <div class="modalDescription-container2">
                        <textarea id="modalDescription" name="description" rows="4" cols="10"></textarea>
                    </div>
                </div>

                <div class="specs-modal-container">
                    <div class="modalSpecs-container1">
                        <label for="modalSpecs">Specs:</label>
                    </div>

                    <div class="modalSpecs-container2">
                        <textarea id="modalSpecs" name="specs" rows="4" cols="10"></textarea>
                    </div>
                </div>

                <div class="quantity-modal-container">
                    <div class="modalQuantity-container1">
                        <label for="modalQuantity">Quantity:</label>        
                    </div>

                    <div class="modalQuantity-container2">
                        <input type="number" id="modalQuantity" name="quantity" placeholder="Quantity">
                    </div>
                </div>
                
                <div class="manage-modal-buttons-container">
                    <div class="update-manage-btn">
                        <button id="updateBtn" type="submit">Update</button>
                    </div>

                    <div class="cancel-manage-btn">
                        <button id="cancelBtn" type="button">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </form>

  {{#each tickets}}
    <div class="ticket-outer-container">
        <div class="ticket-inner-container">
            <div class="ticket-container1">
                <div class="order-container">
                    <div class="order-details">
                        <a href="/tickets/{{this.orderNum}}"><p id="order-number">Order No. {{this.orderNum}}</p></a>
                        <p id="creation-date">Created on: {{this.creationDate}}</p>
                        <p id="ticket-handler">Ticket Handled by: {{this.handlerUsername}}</p>
                    </div>
                </div>
            </div>
          <div class="ticket-container2">
                <div class="status-container">
                    <div class="order-status">
                        <p>{{this.orderStatus}}</p>
                    </div>
                </div>
                <div class="status-container">
                    <div class="order-status">
                        <button class="manageBtn" data-order-number="{{this.orderNum}}"
                                                    data-order-status="{{this.orderStatus}}"
                                                    data-handler="{{this.handlerUsername}}"
                                                    data-description="{{this.description}}"
                                                    data-specs="{{this.specs}}"
                                                    data-quantity="{{this.quantity}}">
                        MANAGE
                        </button>
                    </div>
                </div>
          </div>
        </div>
    </div>
  {{/each}}
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const searchBox = document.getElementById("search-box");
        const sortBySelect = document.getElementById("sort-by");
        const ticketContainer = document.querySelector(".ticket-outer-container");

        let tickets = [
            {{#each tickets}}
                {
                    orderNum: "{{this.orderNum}}",
                    creationDate: "{{this.creationDate}}",
                    handlerUsername: "{{this.handlerUsername}}",
                    orderStatus: "{{this.orderStatus}}"
                    //description: "{{this.description}}"
                    //specs: "{{this.specs}}"
                    //quantity: "{{this.quantity}}"
                },
            {{/each}}
        ];

        // Function to render tickets based on the provided array
        function renderTickets(ticketsArray) {
            ticketContainer.innerHTML = ""; // Clear existing list

            ticketsArray.forEach(ticket => {
                const ticketElement = document.createElement("div");
                ticketElement.classList.add("ticket-inner-container");
                ticketElement.innerHTML = `
                <div class="ticket-inner-container">
                    <div class="ticket-container1">
                        <div class="order-container">
                            <div class="order-details">
                                <a href="/tickets/${ticket.orderNum}"><p id="order-number">Order No. ${ticket.orderNum}</p></a>
                                <p id="creation-date">Created on: ${ticket.creationDate}</p>
                                <p id="ticket-handler">Ticket Handled by: ${ticket.handlerUsername}</p>
                            </div>
                        </div>
                    </div>
                    <div class="ticket-container2">
                        <div class="status-container">
                            <div class="order-status">
                                <p>${ticket.orderStatus}</p>
                            </div>
                        </div>
                        <div class="status-container">
                            <div class="order-status">
                                <button class="manageBtn" data-order-number="${ticket.orderNum}"
                                        data-order-status="${ticket.orderStatus}"
                                        data-handler="${ticket.handlerUsername}"
                                        data-description="${ticket.description}"
                                        data-specs="${ticket.specs}"
                                        data-quantity="${ticket.quantity}">
                                    MANAGE
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                `;
                ticketContainer.appendChild(ticketElement);
            });

            // Event listener for manage button after rendering
            const manageBtns = document.querySelectorAll('.manageBtn');
            manageBtns.forEach(btn => {
                btn.addEventListener('click', function() {
                    const number = btn.getAttribute('data-order-number');
                    const status = btn.getAttribute('data-order-status');
                    const handler = btn.getAttribute('data-handler');
                    const description = btn.getAttribute('data-description');
                    const specs = btn.getAttribute('data-specs');
                    const quantity = btn.getAttribute('data-quantity');
                    $('#modalOrderNum').val(number);
                    $('#modalOrderStatus').val(status);
                    $('#modalHandlerUsername').val(handler);
                    $('#modalDescription').val(description);
                    $('#modalSpecs').val(specs);
                    $('#modalQuantity').val(quantity);
                    $('#ticketModal').show();
                });
                 $('.close, #cancelBtn').click(function() {
            $('#ticketModal').hide();
        });
        $(window).click(function(event) {
            if ($(event.target).is('#ticketModal')) {
                $('#ticketModal').hide();
            }
        });

            });
        }

        // Initial rendering of tickets
        renderTickets(tickets);

        // Event listener for search input
        searchBox.addEventListener("input", function () {
            const searchTerm = searchBox.value.trim().toLowerCase();

            if (searchTerm === "") {
                renderTickets(tickets); // If search input is empty, render all tickets
                return;
            }

            const filteredTickets = tickets.filter(ticket =>
                ticket.orderNum.toString().includes(searchTerm) ||
                ticket.creationDate.toLowerCase().includes(searchTerm) ||
                ticket.handlerUsername.toLowerCase().includes(searchTerm) ||
                ticket.orderStatus.toLowerCase().includes(searchTerm)
            );

            renderTickets(filteredTickets); // Render filtered tickets based on search term
        });

        // Event listener for sorting by status
        sortBySelect.addEventListener("change", function () {
            const sortBy = sortBySelect.value;

            if (sortBy === "all") {
                renderTickets(tickets); // Render all tickets
            } else {
                const sortedTickets = tickets.filter(ticket => ticket.orderStatus === sortBy);
                renderTickets(sortedTickets);
            }
        });
    });
</script>